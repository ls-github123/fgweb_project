"""
Django settings for fgweb_project_api project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
# python-decouple包, 导入本地.env配置信息(mysql数据库地址、密码、端口等),该信息不会被git同步
from decouple import config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pefco&-*6-$hr&+!6xa)7&v9cxyxrf$igv7g)5ly3^g0@o-@zy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True # 配置跨域,允许所有访问

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders', # 跨域配置
    'api',
    'home',
    'users', # 用户管理子应用
    'course', # 课程管理
]

# 设置dajgno AUTH认证系统所需用户模型
# 格式:子应用名 模型类名  # 必须在第一次迁移时就配置完成
AUTH_USER_MODEL = "users.UsersModel"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', # 跨域配置中间件
]

ROOT_URLCONF = 'fgweb_project_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fgweb_project_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': config('DB_NAME'),
#         'HOST': config('DB_HOST', default='localhost'),
#         'PORT': config('DB_PORT', default='3306'),
#         'USER': config('DB_USER'),
#         'PASSWORD':config('DB_PASSWORD'),
#     }
        
    'default': {
            "ENGINE":"dj_db_conn_pool.backends.mysql",
            # 'ENGINE': 'django.db.backends.mysql',
            'NAME': config('DB_NAME'),
            "USER": config('DB_USER'),
            "PASSWORD": config('DB_PASSWORD'),
            "HOST": config('DB_HOST', default='localhost'),
            "PORT": config('DB_PORT', default='3306'),
            'POOL_OPTIONS': { #连接池的配置信息
                'POOL_SIZE': 10,#连接池数量
                'MAX_OVERFLOW': 10, #连接池最大连接数量
                # 'RECYCLE': 24 * 60 * 60
            }
        }
}

# redis数据库配置
# 从.env文件中读取redis配置信息
REDIS_HOST = config('REDIS_HOST', default='127.0.0.1')
REDIS_PORT = config('REDIS_PORT', default=6379, cast=int)
REDIS_PASSWORD = config('REDIS_PASSWORD', default='')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # 连接池配置
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/1",
        # LOCATION:'reids://:密码@IP地址：端口号/库编号'
        "LOCATION": f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # 连接池的配置
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
        }
    },
    
    # 配置站点 短信验证码
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        # "LOCATION": "redis://127.0.0.1:6379/1",
        # LOCATION:'reids://:密码@IP地址：端口号/库编号'
        "LOCATION": f"redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # 连接池的配置
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
        }
    }
}
# 设置用户登录admin站点的时候，记录登录状态的session，保存到redis缓存中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# 设置session保存位置对应的缓存配置想
SESSION_CACHE_ALIAS = "session"


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_URL = [ os.path.join(BASE_DIR.parent, "static") ]
# midia配置
MEDIA_ROOT = os.path.join(BASE_DIR.parent,'media')

# 前端访问后端文件前缀
MEDIA_URL = "/uploads/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 日志
LOGGING = {
    'version': 1, # 使用的日志模块的版本，目前官方提供的只有版本1，但是官方有可能会升级，为了避免升级出现的版本问题，所以这里固定为1
    'disable_existing_loggers': False, # 是否禁用其他的已经存在的日志功能？肯定不能，有可能有些第三方模块在调用，所以禁用了以后，第三方模块无法捕获自身出现的异常了。
    'formatters': { # 日志格式设置，verbose或者simple都是自定义的
        'verbose': { # 详细格式，适合用于开发人员不在场的情况下的日志记录。
            # 格式定义：https://docs.python.org/3/library/logging.html#logrecord-attributes
            # levelname 日志等级
            # asctime   发生时间
            # module    文件名
            # process   进程ID
            # thread    线程ID
            # message   异常信息
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{', # 变量格式分隔符
        },
        'simple': { # 简单格式，适合用于开发人员在场的情况下的终端输出
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {  # 过滤器
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': { # 日志处理流程，console或者mail_admins都是自定义的。
        'console': {
            'level': 'DEBUG', # 设置当前日志处理流程中的日志最低等级
            'filters': ['require_debug_true'], # 当前日志处理流程的日志过滤
            'class': 'logging.StreamHandler',  # 当前日志处理流程的核心类，StreamHandler可以帮我们把日志信息输出到终端下
            'formatter': 'simple'              # 当前日志处理流程的日志格式
        },
        # 'mail_admins': {
        #     'level': 'ERROR',                  # 设置当前日志处理流程中的日志最低等级
        #     'class': 'django.utils.log.AdminEmailHandler',  # AdminEmailHandler可以帮我们把日志信息输出到管理员邮箱中。
        #     'filters': ['special']             # 当前日志处理流程的日志过滤
        # }
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名，日志保存目录logs必须手动创建,注意目录位置，跟主应用统计目录，所以添加parent
            'filename': BASE_DIR.parent / "logs/fuguang.log",
            # 单个日志文件的最大值，这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,
            # 备份日志文件的数量，设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志处理的命名空间
        'django': {
            'handlers': ['console','file'], # 当基于django命名空间写入日志时，调用那几个日志处理流程
            'propagate': True,   # 是否在django命名空间对应的日志处理流程结束以后，冒泡通知其他的日志功能。True表示允许
        },
    }
}

# DRF 配置
REST_FRAMEWORK = {
    # 自定义异常处理
    'EXCEPTION_HANDLER': 'fgweb_project_api.settings.utils.exceptions.costom_exception_handler',
    
    # 自定义认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # jwt认证[api客户端]
        'rest_framework.authentication.SessionAuthentication',  # session认证[Admin站点]
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# JWT配置
# 两种使用情况 续签 和 不续签
# JWT 过期时允许客户端通过token 重新到服务端获取一个新的token
# JWT 过期时强制客户端重新通过账号密码到服务器生成新的token

# # token(有效期较短1天)    refresh_toekn（有效期较长10天）
from datetime import timedelta

SIMPLE_JWT = {
    # token有效时长(返回的 access token 有效时长， access token的用途是提供用户身份，进行身份识别)
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=60*10),
    # token刷新的有效时间(返回的 refresh token 有效时长，refresh token的用途是在access token 过期以后，
    # 允许客户端使用refresh token到服务端换一个新的access token，也因此refresh token的有效期往往比access token的有效期要长)
    'REFRESH_TOKEN_LIFETIME': timedelta(weeks=1),
    # 指定载荷信息的序列化器
    'TOKEN_OBTAIN_SERIALIZER':'users.userserializer.CoustomTokenObtainPairSerializer',
}

# 配置自定义条件（多条件认证登录）类
AUTHENTICATION_BACKENDS = ['users.bankends.CoustomModelBancked', ]


# 验证码发送接口
# 配置阿里云SMS_server
ALIYUNSMS_SERVER = {
    "access_key_id":config("ACCESS_KEY_ID"),
    "access_key_secret":config("ACCESS_KEY_SECRET"),
    
    "sign_name":"浮光web", # 短信验证码签名名称
    "template_code":"SMS_472475222", # 短信验证码模板代码
    "sms_expire": 600, # 验证码有效时间
    "sms_interval": 60 # 60秒 短信发送间隔
}